{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","originalCategories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAU,IAFA,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,uBAAMC,SAZW,SAAEC,GAEnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAkB,OAAMP,GAAN,mBAAqBO,OACtDN,EAAc,MAKlB,UACI,oDACA,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAEP,GAAF,OAASF,EAAeE,EAAEQ,OAAOF,c,+BCNlDG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QAVxB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAEtC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKA,UAAU,wCAAwCC,IAAMf,EAAMgB,IAAMN,IACzE,mBAAGI,UAAU,sCAAb,SAAqDJ,QCHpDO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAbAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAO,SAAAC,GAEJH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAAEpB,IAGEqB,EDlB0BK,CAAc1B,GAAlCa,EAF0B,EAE/BN,KAAaa,EAFkB,EAElBA,QAErB,OACI,qCACI,6BAAMpB,IAEJoB,GAAW,4CAEb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADCA,EAAIC,aEdzBgB,EAAe,WAAO,IAAD,EAEMzC,mBAAU,CAAE,eAFlB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAI9B,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCZ9B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.70a80b47.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ( {setCategorias} ) => {\n\n    const [inputValue, setInputValue] = useState( '' );\n\n    const handleInputChange = ( e ) => setInputValue( e.target.value );\n\n    const handleSubmit = ( e ) => {\n\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            \n            setCategorias( originalCategories => [ inputValue, ...originalCategories, ] );\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <h2>Agregar categorias</h2>\n            <input \n                type=\"text\" \n                value={ inputValue }\n                onChange= { handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategorias: PropTypes.func.isRequired\n}","\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=dr509Q2EqrYpjRLnPZrimfLiG1cnZTYR`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id : img.id,\n            title: img.title,\n            url : img.images?.downsized_medium.url\n        }\n    } );\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img className=\"animate__animated animate__fadeInDown\" src={ url } alt={ title } />\n            <p className=\"animate__animated animate__fadeInUp\">{ title }</p>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3>{ category }</h3>\n            \n            { loading && <p>Cargando...</p> }\n\n            <div className=\"card-grid\">\n                { \n                    images.map( img  => ( \n                        <GifGridItem \n                            key={ img.id } \n                            { ...img } \n                        /> \n                    ) ) \n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n\n    useEffect( () => {\n        \n        getGifs( category )\n            .then(  imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            } );\n    }, [ category ] ); // el useEffect + [] hace que la funcióm se ejeute una sola vez\n    \n    \n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categorias, setCategorias] = useState( [ 'Pokémon' ] );\n\n    return (\n        <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategorias={ setCategorias } />\n        <hr />\n\n        <ol>\n            {\n                categorias.map( category => (\n                    <GifGrid \n                        key={ category }  \n                        category={ category } \n                    />\n                ) )\n            }\n        </ol>\n        </>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}